class AFToast {
  constructor(message = "", type = "info", options = {}) {
    (this.message = message),
      (this.type = type),
      (this.options = options),
      (this.template = ""),
      this.toast();
  }

  toast() {
    return this.getOptions(), this.render();
  }

  generate() {
    const alert = document.createElement(this.options.containertag);
    const style = `
      min-width: 250px;
      z-index: 2000;
      position: fixed;
      bottom: 1rem;
      right: 1rem;
    `;
    return (
      alert.setAttribute("role", "alert"),
      alert.insertAdjacentHTML("afterbegin", this.message),
      alert.classList.add(
        "alert",
        `alert-${this.type}`,
        "alert-solid",
        "shadow"
      ),
      alert.setAttribute("style", style),
      (alert.dataset.aftoast = "toast"),
      this.options.isDismissible &&
        (alert.classList.add("alert-dismissible", "fade", "show"),
        alert.insertAdjacentHTML(
          "beforeend",
          `<button type="button" title="Fermer le message" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`
        )),
      (this.template = alert),
      this
    );
  }
  render() {
    this.generate();
    const container = void 0;
    document
      .querySelector(this.options.container)
      .insertAdjacentElement("beforeend", this.template),
      this.options.duration &&
        setTimeout(() => {
          this.template.remove();
        }, this.options.duration);
  }

  getOptions() {
    return (
      (this.options.duration = this.options.duration ?? null),
      (this.options.container = this.options.container ?? "body"),
      (this.options.isDismissible = this.options.isDismissible ?? false),
      (this.options.containertag = this.options.containertag ?? "div"),
      this
    );
  }
}
